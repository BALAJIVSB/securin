"""
from flask import Flask, request
import requests
import json
from datetime import datetime
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cve_data.db'
db = SQLAlchemy(app)

class CVE(db.Model):
    id = db.Column(db.String(20), primary_key=True)
    published = db.Column(db.String(20))
    last_modified = db.Column(db.String(20))
    status = db.Column(db.String(20))

@app.route('/')
def index():
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 10))
    start_index = (page - 1) * per_page
    end_index = start_index + per_page

    response = requests.get('https://services.nvd.nist.gov/rest/json/cves/2.0')

    if response.status_code == 200:
        data = json.loads(response.text)
        for vuln in data['vulnerabilities']:
            cve_id = vuln['cve']['id']
            published = datetime.strptime(vuln['cve']['published'], '%Y-%m-%dT%H:%M:%S.%f').strftime('%d %b %Y')
            last_modified = datetime.strptime(vuln['cve']['lastModified'], '%Y-%m-%dT%H:%M:%S.%f').strftime('%d %b %Y')
            status = vuln['cve']['vulnStatus']

            cve = CVE.query.get(cve_id)
            if cve is None:
                cve = CVE(id=cve_id, published=published, last_modified=last_modified, status=status)
                db.session.add(cve)
                db.session.commit()

        total_records = CVE.query.count()
        paginated_data = CVE.query.offset(start_index).limit(per_page).all()

        return f"Total Records: {total_records}\n{', '.join([cve.id for cve in paginated_data])}"
    else:
        return f'Error: {response.status_code}'

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)

    """


from flask import Flask, request, jsonify
import requests
import json
from datetime import datetime
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cve_data.db'
db = SQLAlchemy(app)

class CVE(db.Model):
    id = db.Column(db.String(20), primary_key=True)
    published = db.Column(db.String(20))
    last_modified = db.Column(db.String(20))
    status = db.Column(db.String(20))

@app.route('/')
def index():
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 10))
    start_index = (page - 1) * per_page
    end_index = start_index + per_page

    response = requests.get('https://services.nvd.nist.gov/rest/json/cves/2.0')

    if response.status_code == 200:
        data = json.loads(response.text)
        for vuln in data['vulnerabilities']:
            cve_id = vuln['cve']['id']
            published = datetime.strptime(vuln['cve']['published'], '%Y-%m-%dT%H:%M:%S.%f').strftime('%d %b %Y')
            last_modified = datetime.strptime(vuln['cve']['lastModified'], '%Y-%m-%dT%H:%M:%S.%f').strftime('%d %b %Y')
            status = vuln['cve']['vulnStatus']

            cve = CVE.query.get(cve_id)
            if cve is None:
                cve = CVE(id=cve_id, published=published, last_modified=last_modified, status=status)
                db.session.add(cve)
                db.session.commit()

        total_records = CVE.query.count()
        paginated_data = CVE.query.offset(start_index).limit(per_page).all()

        return f"Total Records: {total_records}\n{', '.join([cve.id for cve in paginated_data])}"
    else:
        return f'Error: {response.status_code}'

@app.route('/cve/<cve_id>')
def get_cve(cve_id):
    cve = CVE.query.get(cve_id)
    if cve is not None:
        return jsonify({
            'id': cve.id,
            'published': cve.published,
            'last_modified': cve.last_modified,
            'status': cve.status
        })
    else:
        return f'CVE ID {cve_id} not found', 404

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)  